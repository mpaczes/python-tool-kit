
Flask - Python web development framework.

Część II :

    SQLAlchemy, czyli ORM dla Flask

(1) How to Use Databases With SQLAlchemy :

    (1.1) pip install flask-sqlalchemy
    
    flask run
    
    (1.2) tworzymy plik 'hello.py' :
    
        from flask_sqlalchemy import SQLAlchemy
        from datetime import datetime
        
        app.config[SQLALCHEMY_DATABASE_URI] = 'sqlite:///users.db'
        
        # inicjalizacja bazy danych
        db = SQLAlchemy(app)
        
        # tworzenie modelu
        class Users(db.Model):
            id = db.Column(db.Integer, primary_key=True)
            name = db.Column(db.String(200), nullable=False)
            email = db.Column(db.String(120), nullable=False, unique=True)
            date_added = db.Column(db.DateTime, default=datetime.utcnow)
            
            # create string
            def __repr__(self):
                return '<Name %r>' % self.name
            
    (1.3) Shell Python z poziomu konsoli Git Bash :
    
        winpty python
        
        >>> from hello import db
        >>> db.create_all()
        >>> exit()
        
        utworzy się plik 'users.db'
        
        flask run
        
    (1.4) Skrypt Python :
    
        @app.route('/user/add', methods=['GET', 'POST'])
        def add_user():
            name = None
            form = UserForm()
            if form.validat_on_submit():
                user = Users.query.filter_by(email=form.email.data)
                if user is None:
                    user = Users(name=form.name.data, email=form.email.data)
                    db.session.add(user)
                    db.session.commit()
                name = form.name.data
                
                form.name.data = ''
                form.email.data = ''
                
                flash('User added successfully')
                
            our_users = Users.query.order_by(Users.date_added)
                    
            return render_template('add_user.html', form=form, name=name, our_users=our_users)

(2) How To Update A Record In The Database :

    (2.1) Skrypt Python :
    
        @app.route('/update/<int:id>', methods=['GET', 'POST'])
        def update(id):
            form = UserForm()
            name_to_update = Users.query.get_or_404(id)
            if request.method == 'POST':
                name_to_update.name = request.form['name']
                name_to_update.email = request.form['email']
                try:
                    db.session.commit()
                    flash('User updated successfully')
                    return render_template('update.html', form=form, name_to_update=name_to_update)
                except:
                    flash('Error. Looks like there was a problem.')
                    return render_template('update.html', form=form, name_to_update=name_to_update)
            else:
                return render_template('update.html', form=form, name_to_update=name_to_update)

(3) How To Migrate Database With Flask :

    tworzymy migrację (definiujemy dane) i potem ją wypychamy do bazy danych
    
    tworzymy historię migracji do któej możemy wrócić
    
    (3.1) tworzymy nową kolumnę w modelu :
    
            class Users(db.Model):
                id = db.Column(db.Integer, primary_key=True)
                name = db.Column(db.String(200), nullable=False)
                email = db.Column(db.String(120), nullable=False, unique=True)
                favorite_color = db.Column(db.String(120))
                date_added = db.Column(db.DateTime, default=datetime.utcnow)
                
                # create string
                def __repr__(self):
                    return '<Name %r>' % self.name
    
    (3.2) pip install Flask-Migrate
    
        from flask_migrate import Migrate
        app = Flask(__name__)
        db = SQLAlchemy(app)
        migrate = Migrate(app, db)
    
    (3.3) w konsoli Git Bash :
    
        flask db init - utworzy się nowy katalog 'migrations'
        
        flask db migrate -m 'Initial migration'
        
        flask db upgrade
        
        opis 'flask db' - perform database migrations :
        
            commands :
                history - list changset scripts in chronological order
                init - creates a new migration repository
                migrate - autogenerate a new revision file
                upgrade - upgrade to a later version
    
(4) Delete Database Records With Flask :

    @app.route('/delete/<int:id>')
    def delete(id):
        user_to_delete = Users.query.get_or_404(id)
        name = None
        form = UserForm()
        try:
            db.session.delete(user_to_delete)
            db.session.commit()
            flash('User deleted successfully')
            our_users = Users.query.order_by(Users.date_added)
            return render_template('add_user.html', form=form, name=name, our_users=our_users)
        except:
            flash('There was a problem deleting user')
            return render_template('add_user.html', form=form, name=name, our_users=our_users)

(5) How To Return JSON With Flask For an API :

    wcześniej używało się 'jsonify'
    
    teraz wystarczy zwrócić z funkcji słownik ('dict')

    from datetime import date

    @app.route('/date')
    def get_current_date():
        favorite_pizza = {
            'john': 'pepperoni',
            'mary': 'cheese',
            'tim': 'mushroom'
        }
        # return {'date': date.today()}
        return favorite_pizza
