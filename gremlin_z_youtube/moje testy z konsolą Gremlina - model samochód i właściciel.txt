
Moje testy z konsolą Gremlina - model 'Samochód - właścicel'.

Do działania potrzebny jest lokalny serwer Gremlina na porcie 8182 i konsola Gremlina.

Wszystkie przykłady zostały uruchomione w konsoli Gremlina.

Strona z książką online o Gremlinie ('PRACTICAL GREMLIN: An Apache TinkerPop Tutorial') :

	https://www.kelvinlawrence.net/book/PracticalGremlin.html

(1) początkowa konfiguracja :

	graph = TinkerGraph.open()
	g = traversal().withEmbedded(graph)
	
	g.V().count()	-> 0
	g.E().count()	-> 0
	
	g.V().drop()	-> usuwa wszystkie wierzhołki grafu
	g.E().drop()	-> usuwa wszystkie gałęzie grafu

	:cls			-> czyści ekran konsoli Gremlina

(2) utworzenie wierzchołków grafu - samochody :

	g.addV('samochód').property('numer_rejestracyjny', 'EKU 3443').property('marka', 'Skoda').property('model', 'Octavia II').property('kolor_nadwozia', 'zielony').property('skrzynia_biegów', 'manualna-5').next()
	g.addV('samochód').property('numer_rejestracyjny', 'PO 2211').property('marka', 'Fiat').property('model', '125 P').property('kolor_nadwozia', 'czwerwony').property('skrzynia_biegów', 'manualna-4').next()
	g.addV('samochód').property('numer_rejestracyjny', 'DW 9900').property('marka', 'Renault').property('model', 'Laguna').property('kolor_nadwozia', 'biały').property('skrzynia_biegów', 'manualna-5').next()
	g.addV('samochód').property('numer_rejestracyjny', 'CSK 4455').property('marka', 'Porsche').property('model', 'Carrera').property('kolor_nadwozia', 'niebieski').property('skrzynia_biegów', 'automatyczna-6').next()
	g.addV('samochód').property('numer_rejestracyjny', 'ZSL 8877').property('marka', 'Syrena').property('model', '100').property('kolor_nadwozia', 'biały').property('skrzynia_biegów', 'manualna-3').next()

(3) utworzenie wierzchołków grafu - właścicele :

	g.addV('właścicel').property('imię', 'Janina').property('nazwisko', 'Szewska').property('data_urodzenie', '1980-09-14').property('kategorie_prawa_jazdy', 'ABT').next()
	g.addV('właścicel').property('imię', 'Stefan').property('nazwisko', 'Jarząbek').property('data_urodzenie', '1992-11-25').property('kategorie_prawa_jazdy', 'CDE').next()
	g.addV('właścicel').property('imię', 'Zdzisław').property('nazwisko', 'Dziąsło').property('data_urodzenie', '2003-04-30').property('kategorie_prawa_jazdy', 'ABCDET').next()

(4) utworzenie gałęzi grafu - relacje typu 'posiada' i 'należy_do' :

	# relacje typu 'posiada' :
	g.V().has('samochód', 'numer_rejestracyjny', 'CSK 4455').as('wierzhołek_samochód')\
	.V().and(has('właścicel', 'imię','Zdzisław'), has('właścicel', 'nazwisko','Dziąsło')).addE('posiada')\
	.to('wierzhołek_samochód')
	
	g.V().has('samochód', 'numer_rejestracyjny', 'ZSL 8877').as('wierzhołek_samochód')\
	.V().and(has('właścicel', 'imię','Zdzisław'), has('właścicel', 'nazwisko','Dziąsło')).addE('posiada')\
	.to('wierzhołek_samochód')
	
	g.V().has('samochód', 'numer_rejestracyjny', 'EKU 3443').as('wierzhołek_samochód')\
	.V().and(has('właścicel', 'imię','Stefan'), has('właścicel', 'nazwisko','Jarząbek')).addE('posiada')\
	.to('wierzhołek_samochód')
	
	# relacje typu 'należy_do' :
	g.V().and(has('właścicel', 'imię','Zdzisław'), has('właścicel', 'nazwisko','Dziąsło')).as('wierzhołek_właścicel')\
	.V().has('samochód', 'numer_rejestracyjny', 'CSK 4455').addE('należy_do')\
	.to('wierzhołek_właścicel')
	
	g.V().and(has('właścicel', 'imię','Zdzisław'), has('właścicel', 'nazwisko','Dziąsło')).as('wierzhołek_właścicel')\
	.V().has('samochód', 'numer_rejestracyjny', 'ZSL 8877').addE('należy_do')\
	.to('wierzhołek_właścicel')

	g.V().and(has('właścicel', 'imię','Stefan'), has('właścicel', 'nazwisko','Jarząbek')).as('wierzhołek_właścicel')\
	.V().has('samochód', 'numer_rejestracyjny', 'EKU 3443').addE('należy_do')\
	.to('wierzhołek_właścicel')

(5) Informacje o utworzonym grafie :

	g.V().hasLabel('samochód')
	g.V().hasLabel('właścicel')
	
	g.V().has('samochód', 'numer_rejestracyjny', 'EKU 3443')
	g.V().and(has('właścicel', 'imię','Stefan'), has('właścicel', 'nazwisko','Jarząbek'))

	g.V().has('samochód', 'numer_rejestracyjny', 'EKU 3443').values() -> wartości właściwości wierzhołka (nie ma kluczy)
	g.V().and(has('właścicel', 'imię','Stefan'), has('właścicel', 'nazwisko','Jarząbek')).values()
	
	g.V().and(has('właścicel', 'imię','Stefan'), has('właścicel', 'nazwisko','Jarząbek')).values().fold()	-> tworzy listę wartości

	g.V().has('samochód', 'numer_rejestracyjny', 'EKU 3443').valueMap(true) -> A call to valueMap will return all of the properties of a vertex or edge as an array of key:value pairs. Basically what in Java terms is called a HashMap. 
	g.V().has('samochód', 'numer_rejestracyjny', 'EKU 3443').valueMap(true).unfold() -> The unfold step at the end of the query is used to make the results easier to read.
	
	g.V().and(has('właścicel', 'imię','Stefan'), has('właścicel', 'nazwisko','Jarząbek')).valueMap().select('imię', 'nazwisko')	-> nie ma id i label
	g.V().and(has('właścicel', 'imię','Stefan'), has('właścicel', 'nazwisko','Jarząbek')).valueMap(true, 'imię', 'nazwisko').unfold() -> jest label i id
	
	g.V().has('samochód', 'numer_rejestracyjny', 'EKU 3443').id() -> What is the ID of the vertex?
	g.V().has('samochód', 'numer_rejestracyjny', 'EKU 3443').label() -> What label does the vertex have?
	
	g.E().or(hasLabel('posiada'), hasLabel('należy_do')) -> operator or
	g.V().or(hasLabel('właścicel'), hasLabel('samochód')) -> operator or
	g.V().and(has('właścicel', 'imię','Zdzisław'), has('właścicel', 'nazwisko','Dziąsło')) -> operator and
	
	